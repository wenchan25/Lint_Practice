/* 注意把几个方法拆开来写 */
/* 注意这里是qx qy一个个地送，而不是先取q的size，一次性地出队。因为这个需要x和y两个参数 */

// 这个是泛型，不过需要把boolean改成Boolean，在这里不行
    // check if the x/y axis is still within the boundary;
    private static <T> boolean isInbound(T[][] matrix, int x, int y) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        if (x >= 0 && x < rows && y >= 0 && y < cols) return true;
        return false;
    }

/* below is AC answer */
public class Solution {
    /**
     * @param grid: a boolean 2D matrix
     * @return: an integer
     */
    public int numIslands(boolean[][] grid) {
        // write your code here
        if (grid == null || grid.length == 0 || grid[0].length == 0) return 0;

        int res = 0;
        int rows = grid.length, cols = grid[0].length;
        boolean[][] v = new boolean[rows][cols];

        // iterate all the elements
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                // if it's 1 (i.e., island) and not visited before;
                if (grid[i][j] && !v[i][j]) {
                    res++;
                    bfs(grid, v, i, j);
                }
            }
        }
        return res;
    }

    private static void bfs(boolean[][] grid, boolean[][] v, int sx, int sy) {
        int[] dx = {0, 0, -1, 1};
        int[] dy = {-1, 1, 0, 0};

        Queue<Integer> qx = new LinkedList<>(), qy = new LinkedList<>();
        qx.offer(sx);
        qy.offer(sy);
        v[sx][sy] = true;

        while (!qx.isEmpty()) {
            int cx = qx.poll();
            int cy = qy.poll();
            for (int i = 0; i < 4; i++) {
                int nx = cx + dx[i];
                int ny = cy + dy[i];
                if (isInbound(grid, nx, ny) && !v[nx][ny] && grid[nx][ny]) {
                    qx.offer(nx);
                    qy.offer(ny);
                    v[nx][ny] = true;
                }
            }
        }
    }

    // check if the x/y axis is still within the boundary;
    private static boolean isInbound(boolean[][] matrix, int x, int y) {
        int rows = matrix.length;
        int cols = matrix[0].length;
        if (x >= 0 && x < rows && y >= 0 && y < cols) return true;
        return false;
    }
}
