/* Iteration */
public class Solution {
    /**
     * @param root: A Tree
     * @return: Postorder in ArrayList which contains node values.
     */
    public List<Integer> postorderTraversal(TreeNode root) {
        // write your code here
        Stack<TreeNode> s1 = new Stack<>();
        Stack<TreeNode> s2 = new Stack<>();
        
        List<Integer> res = new ArrayList<>();
        
        if (root == null) return res;
        
        s1.push(root);
        while (!s1.isEmpty()){
            TreeNode curr = s1.pop();
            s2.push(curr);
            if (curr.left != null) s1.push(curr.left);
            if (curr.right != null) s1.push(curr.right);
        }
        
        while (!s2.isEmpty()){
            res.add(s2.pop().val);
        }
        return res;
    }
}

https://www.youtube.com/watch?v=qT65HltK2uE&t=306s

/* Iteration 2, using only 1 stack */
https://www.youtube.com/watch?v=xLQKdq0Ffjg
    public List<Integer> postorderTraversal(TreeNode root) {
        // write your code here
        Stack<TreeNode> s = new Stack<>();
        List<Integer> res = new ArrayList<>();

        if (root == null) return res;

        // initialize
        TreeNode curr = root;

        while (curr != null || !s.isEmpty()) {
            if (curr != null) { // not reached leaf yet;
                s.push(curr);
                curr = curr.left; // keep digging to the left;
            } else {
                // root == null => it reached the leaf, need to check the right
                TreeNode parent = s.peek();
                TreeNode temp = parent.right; //用temp也是对的，因为的确是临时的

                // if right is null, no need to check further
                // b/c both left and right are null now;
                if (temp == null) {
                    temp = s.pop(); // just pop the parent;
                    res.add(temp.val);
                    // 必须用while，因为现在的s.peek已经是新的parent了
                    // 检查temp是不是现在的parent的right
                    while (!s.isEmpty() && temp == s.peek().right) {
                        temp = s.pop();
                        res.add(temp.val);
                    }
                } else {
                    curr = temp;
                }
            }
        }
        return res;
    }
}



/* Recursion template 1 */
public class Solution {
    /**
     * @param root: A Tree
     * @return: Postorder in ArrayList which contains node values.
     */
    public List<Integer> postorderTraversal(TreeNode root) {
        // write your code here
        List<Integer> res = new ArrayList<>();
        helper2(root, res);
        return res;
    }

    private static void helper2(TreeNode root, List<Integer> res) {
        if (root == null) return;
        
        helper2(root.left, res);
        helper2(root.right, res);
        res.add(root.val);
    }
}

/* Recursion 2, Divide and conquer */
public class Solution {
    /**
     * @param root: A Tree
     * @return: Postorder in ArrayList which contains node values.
     */
    public List<Integer> postorderTraversal(TreeNode root) {
        // write your code here
        List<Integer> res = new ArrayList<>();

        if (root == null) return res;

        List<Integer> left = postorderTraversal(root.left);
        List<Integer> right= postorderTraversal(root.right);

        res.addAll(left);
        res.addAll(right);
        res.add(root.val);
        return res;
    }
}
