public class Solution {
    /*
     * @param nums: A list of integers.
     * @return: A list of permutations.
     */
    public List<List<Integer>> permute(int[] nums) {
        // corner case
        if (nums == null) return null;

        List<List<Integer>> res = new ArrayList<>();
        List<Integer> permutation = new ArrayList<>();
        boolean[] visited = new boolean[nums.length];

        dfs(nums, visited, permutation, res);
        return res;
    }

    private void dfs(int[] nums, boolean[] visited, List<Integer> permutation, List<List<Integer>> res) {
        // when all possible numbers are checked;
        // just add the result and break;
        if (nums.length == permutation.size()) {
            res.add(new ArrayList<>(permutation));
            return;
        }

        // add each number one by one;
        for (int i = 0; i < nums.length; i++) {
            if (visited[i]) continue;

            // otherwise, add to visited
            int curr = nums[i];
            permutation.add(curr);
            visited[i] = true;
            dfs(nums, visited, permutation, res);
            // after the dfs, will back track to the starting point;
            visited[i] = false;
            permutation.remove(permutation.size() - 1);
        }
    }
}
