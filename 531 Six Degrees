public class Solution {
    /*
     * @param graph: a list of Undirected graph node
     * @param s: Undirected graph node
     * @param t: Undirected graph nodes
     * @return: an integer
     */
    public int sixDegrees(List<UndirectedGraphNode> graph, UndirectedGraphNode s, UndirectedGraphNode t) {
        if (s == t) {
            return 0;
        }

        Map<UndirectedGraphNode, Integer> visited = new HashMap<>();
        Queue<UndirectedGraphNode> q = new LinkedList<>();

        q.offer(s);
        visited.put(s, 0);
        while (!q.isEmpty()) {
            UndirectedGraphNode curr = q.poll();
            int distance = visited.get(curr);
            
            for (int i = 0; i < curr.neighbors.size(); i++) {
                UndirectedGraphNode neighbor = curr.neighbors.get(i);
                if (visited.containsKey(neighbor)) {
                    // means it is visited before, ignore it
                    continue;
                }
                // check if it has reached destination
                if (neighbor == t) {
                    return distance + 1;
                }
                
                visited.put(neighbor, distance + 1);
                q.offer(neighbor);
                
                
            }
        }
        return -1;
    }
}
