/*
        +--+    
src:    1->2->3


step1: copy node
        +------+
src:    1->1'->2->2'->3->3'


step2: copy random link
        +------+
src:    1->1'->2->2'->3->3'
           +------+


step3: split two lists
        +--+    
src:    1->2->3

        +---+    
dst:    1'->2'->3'
*/

public class Solution {
    /**
     * @param head: The head of linked list with a random pointer.
     * @return: A new head of a deep copy of the list.
     */
    
    /*第一遍扫的时候巧妙运用next指针， 开始数组是1->2->3->4  。 然后扫描过程中 先建立copy节点 1->1`->2->2`->3->3`->4->4`, 
      然后第二遍copy的时候去建立边的copy， 拆分节点, 一边扫描一边拆成两个链表，这里用到两个dummy node。第一个链表变回  1->2->3 , 然后第二变成 1`->2`->3`  */
    //No HashMap version
    // 1st iteration
    private void copyNext(RandomListNode head) {
        while (head != null) {
            RandomListNode newNode = new RandomListNode(head.label);
            newNode.next = head.next;
            // change head to point to newNode
            head.next = newNode;
            // move pointer 
            head = newNode.next;
        }
    }
    
    // 2nd iteration
    private void copyRandom (RandomListNode head) {
        while (head != null ) {
            if (head.random != null) {
                // head's random's next is the copied one;
                head.next.random = head.random.next;
            }
            head = head.next.next;
        }
    }
    
    // 3rd iteration
    private RandomListNode splitList(RandomListNode head) {
        // this is more like a dummy;
        RandomListNode newHead = head.next; 
        while (head!=null) {
            RandomListNode temp = head.next; // temp is our de facto pointer
            head.next = temp.next; // give the original linking back
            head = head.next; // move from 1 to 2
            if (temp.next != null) {
                temp.next = temp.next.next; // point from 1'->2 to 1'->2'
            }
        }
        return newHead;
    }
    
    
    public RandomListNode copyRandomList(RandomListNode head) {
        // write your code here
        if (head == null) return head;
        copyNext(head);
        copyRandom(head);
        return splitList(head);
        
    }
    
    
    
}
