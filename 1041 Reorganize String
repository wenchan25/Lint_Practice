/* Methods 1, use PQ */

public class Solution {
    /**
     * @param S: a string
     * @return: return a string
     */
    public String reorganizeString(String S) {
        // write your code here
        int[] dict = new int[26];
        int threshold = (S.length() + 1) / 2;
        for (char c : S.toCharArray()) {
            dict[c - 'a']++;
            if (dict[c - 'a'] >  threshold) return "";
        }

        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> (b[1] - a[1]));

        for (int i = 0; i < dict.length; i++) {
            if (dict[i] > 0) {
                int letter = i + 'a'; // i.e., i + 97
                int count = dict[i];
                pq.offer(new int[]{letter, count});
            }
        }

        StringBuilder res = new StringBuilder();

        while (!pq.isEmpty()) {
            int[] first = pq.poll();
            // check if it's empty string, or if it's the same char as previous
            if (res.length() == 0 || first[0] != res.charAt(res.length() - 1)) {
                res.append((char) first[0]); // first[0] is letter
                if (--first[1] > 0) pq.offer(first);
            } else {
                int[] second = pq.poll();
                res.append((char) second[0]);
                if (--second[1] > 0) pq.offer(second);
                pq.offer(first); // this is tricky
            }
        }

        return res.toString();
    }
}
