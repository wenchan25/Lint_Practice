/* map method */
public class Solution {
    /**
     * @param nums1: an integer array
     * @param nums2: an integer array
     * @return: an integer array
     */
    public int[] intersection(int[] nums1, int[] nums2) {
        // write your code here
        
        // map as counter storage, so no more sort
        Map<Integer, Integer> map = new HashMap<>();
        List<Integer> list = new ArrayList<>();
        
        for (int i = 0; i < nums1.length; i++) {
            int number = nums1[i];
            if (!map.containsKey(number)) map.put(number, 1);
            else {
                int count = map.get(number);
                map.put(number, ++count);
            }
        }
        
        // loop through second list
        for (int j = 0; j < nums2.length; j++) {
            int key = nums2[j];
            if (map.containsKey(key) && map.get(key) > 0) {
                list.add(key);
                int count = map.get(key);
                map.put(key, --count);
            }
        }
        
        int[] res = new int[list.size()];
        int k = 0;
        for (int m : list) res[k++] = m;
        return res;
    }
}


/* use sort */

class Solution {
    public int[] intersect(int[] nums1, int[] nums2) {
        List<Integer> list = new ArrayList<>();
        Arrays.sort(nums1);
        Arrays.sort(nums2);
        
        int i = 0, j = 0;
        while (i < nums1.length && j < nums2.length) {
            if (nums1[i] < nums2[j]) i++;
            else if (nums1[i] > nums2[j]) j++;
            else {
                list.add(nums1[i]);
                i++;
                j++;
            }
        }
        
        int k = 0;
        int [] ans = new int[list.size()];
        for (int m : list) ans[k++] = m;
        return ans;
    }
}
