public class Solution {
    /**
     * @param grid: a 2D integer grid
     * @return: an integer
     */
    public int zombie(int[][] grid) {
        // write your code here
        if (grid == null || grid.length == 0 || grid[0].length == 0) return 0;
        return bfs2(grid);
    }

    int bfs2(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;

        Queue<Integer> qx = new LinkedList<>();
        Queue<Integer> qy = new LinkedList<>();
        // set to record visited or not
        boolean[][] v = new boolean[rows][cols];

        // directions
        int[] dx = {0, 0, -1, 1};
        int[] dy = {-1, 1, 0, 0};

        // find all the zombies
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 1) {
                    qx.offer(i);
                    qy.offer(j);
                }
            }
        }

        //  check all the surroundings
        int dist = 0;
        while (!qx.isEmpty()) {
            dist++;
            int size = qx.size(); // 这个重要，因为qx的size是一直在变化的
            while (size > 0) {
                size--;
                int cx = qx.poll();
                int cy = qy.poll();

                for (int i = 0; i < 4; i++) {
                    int nx = cx + dx[i];
                    int ny = cy + dy[i];
                    // get people
                    if (nx >= 0 && nx < rows && ny >= 0 && ny < cols && grid[nx][ny] == 0 && !v[nx][ny]) {
                        qx.offer(nx);
                        qy.offer(ny);
                        grid[nx][ny] = 1; // maybe optional?
                        v[nx][ny] = true;
                    }
                }
            }
        }
        dist--; //?

        // final check on dead-end;
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (grid[i][j] == 0 && !v[i][j]) return -1;
            }
        }
        return dist;
    }
}
